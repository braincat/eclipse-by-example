/**
 */
package com.oracle.xmlns.ord.meta.exif.provider;

import com.oracle.xmlns.ord.meta.exif.util.ExifAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ExifItemProviderAdapterFactory extends ExifAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExifItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.BitsPerSampleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BitsPerSampleTypeItemProvider bitsPerSampleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.BitsPerSampleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBitsPerSampleTypeAdapter() {
		if (bitsPerSampleTypeItemProvider == null) {
			bitsPerSampleTypeItemProvider = new BitsPerSampleTypeItemProvider(this);
		}

		return bitsPerSampleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.Chromaticity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChromaticityItemProvider chromaticityItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.Chromaticity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChromaticityAdapter() {
		if (chromaticityItemProvider == null) {
			chromaticityItemProvider = new ChromaticityItemProvider(this);
		}

		return chromaticityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.ColorSpaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorSpaceTypeItemProvider colorSpaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.ColorSpaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorSpaceTypeAdapter() {
		if (colorSpaceTypeItemProvider == null) {
			colorSpaceTypeItemProvider = new ColorSpaceTypeItemProvider(this);
		}

		return colorSpaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.CompressionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompressionTypeItemProvider compressionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.CompressionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompressionTypeAdapter() {
		if (compressionTypeItemProvider == null) {
			compressionTypeItemProvider = new CompressionTypeItemProvider(this);
		}

		return compressionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.ContrastType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContrastTypeItemProvider contrastTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.ContrastType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContrastTypeAdapter() {
		if (contrastTypeItemProvider == null) {
			contrastTypeItemProvider = new ContrastTypeItemProvider(this);
		}

		return contrastTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.CustomRenderedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomRenderedTypeItemProvider customRenderedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.CustomRenderedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomRenderedTypeAdapter() {
		if (customRenderedTypeItemProvider == null) {
			customRenderedTypeItemProvider = new CustomRenderedTypeItemProvider(this);
		}

		return customRenderedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.DateTimeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTimeTypeItemProvider dateTimeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.DateTimeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTimeTypeAdapter() {
		if (dateTimeTypeItemProvider == null) {
			dateTimeTypeItemProvider = new DateTimeTypeItemProvider(this);
		}

		return dateTimeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.DateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTypeItemProvider dateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.DateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTypeAdapter() {
		if (dateTypeItemProvider == null) {
			dateTypeItemProvider = new DateTypeItemProvider(this);
		}

		return dateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.ExifIfdType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExifIfdTypeItemProvider exifIfdTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.ExifIfdType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExifIfdTypeAdapter() {
		if (exifIfdTypeItemProvider == null) {
			exifIfdTypeItemProvider = new ExifIfdTypeItemProvider(this);
		}

		return exifIfdTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.ExifMetadataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExifMetadataTypeItemProvider exifMetadataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.ExifMetadataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExifMetadataTypeAdapter() {
		if (exifMetadataTypeItemProvider == null) {
			exifMetadataTypeItemProvider = new ExifMetadataTypeItemProvider(this);
		}

		return exifMetadataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.ExposureModeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExposureModeTypeItemProvider exposureModeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.ExposureModeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExposureModeTypeAdapter() {
		if (exposureModeTypeItemProvider == null) {
			exposureModeTypeItemProvider = new ExposureModeTypeItemProvider(this);
		}

		return exposureModeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.ExposureProgramType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExposureProgramTypeItemProvider exposureProgramTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.ExposureProgramType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExposureProgramTypeAdapter() {
		if (exposureProgramTypeItemProvider == null) {
			exposureProgramTypeItemProvider = new ExposureProgramTypeItemProvider(this);
		}

		return exposureProgramTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.FileSourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileSourceTypeItemProvider fileSourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.FileSourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileSourceTypeAdapter() {
		if (fileSourceTypeItemProvider == null) {
			fileSourceTypeItemProvider = new FileSourceTypeItemProvider(this);
		}

		return fileSourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.FlashType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlashTypeItemProvider flashTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.FlashType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlashTypeAdapter() {
		if (flashTypeItemProvider == null) {
			flashTypeItemProvider = new FlashTypeItemProvider(this);
		}

		return flashTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GainControlType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GainControlTypeItemProvider gainControlTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GainControlType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGainControlTypeAdapter() {
		if (gainControlTypeItemProvider == null) {
			gainControlTypeItemProvider = new GainControlTypeItemProvider(this);
		}

		return gainControlTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsAltitudeRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsAltitudeRefTypeItemProvider gpsAltitudeRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsAltitudeRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsAltitudeRefTypeAdapter() {
		if (gpsAltitudeRefTypeItemProvider == null) {
			gpsAltitudeRefTypeItemProvider = new GpsAltitudeRefTypeItemProvider(this);
		}

		return gpsAltitudeRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsBearingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsBearingTypeItemProvider gpsBearingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsBearingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsBearingTypeAdapter() {
		if (gpsBearingTypeItemProvider == null) {
			gpsBearingTypeItemProvider = new GpsBearingTypeItemProvider(this);
		}

		return gpsBearingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsDifferentialType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsDifferentialTypeItemProvider gpsDifferentialTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsDifferentialType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsDifferentialTypeAdapter() {
		if (gpsDifferentialTypeItemProvider == null) {
			gpsDifferentialTypeItemProvider = new GpsDifferentialTypeItemProvider(this);
		}

		return gpsDifferentialTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsDirectionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsDirectionTypeItemProvider gpsDirectionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsDirectionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsDirectionTypeAdapter() {
		if (gpsDirectionTypeItemProvider == null) {
			gpsDirectionTypeItemProvider = new GpsDirectionTypeItemProvider(this);
		}

		return gpsDirectionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsDistanceRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsDistanceRefTypeItemProvider gpsDistanceRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsDistanceRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsDistanceRefTypeAdapter() {
		if (gpsDistanceRefTypeItemProvider == null) {
			gpsDistanceRefTypeItemProvider = new GpsDistanceRefTypeItemProvider(this);
		}

		return gpsDistanceRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsIfdType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsIfdTypeItemProvider gpsIfdTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsIfdType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsIfdTypeAdapter() {
		if (gpsIfdTypeItemProvider == null) {
			gpsIfdTypeItemProvider = new GpsIfdTypeItemProvider(this);
		}

		return gpsIfdTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsLatitudeRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsLatitudeRefTypeItemProvider gpsLatitudeRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsLatitudeRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsLatitudeRefTypeAdapter() {
		if (gpsLatitudeRefTypeItemProvider == null) {
			gpsLatitudeRefTypeItemProvider = new GpsLatitudeRefTypeItemProvider(this);
		}

		return gpsLatitudeRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsLatitudeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsLatitudeTypeItemProvider gpsLatitudeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsLatitudeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsLatitudeTypeAdapter() {
		if (gpsLatitudeTypeItemProvider == null) {
			gpsLatitudeTypeItemProvider = new GpsLatitudeTypeItemProvider(this);
		}

		return gpsLatitudeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsLongitudeRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsLongitudeRefTypeItemProvider gpsLongitudeRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsLongitudeRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsLongitudeRefTypeAdapter() {
		if (gpsLongitudeRefTypeItemProvider == null) {
			gpsLongitudeRefTypeItemProvider = new GpsLongitudeRefTypeItemProvider(this);
		}

		return gpsLongitudeRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsLongitudeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsLongitudeTypeItemProvider gpsLongitudeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsLongitudeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsLongitudeTypeAdapter() {
		if (gpsLongitudeTypeItemProvider == null) {
			gpsLongitudeTypeItemProvider = new GpsLongitudeTypeItemProvider(this);
		}

		return gpsLongitudeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsMeasureModeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsMeasureModeTypeItemProvider gpsMeasureModeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsMeasureModeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsMeasureModeTypeAdapter() {
		if (gpsMeasureModeTypeItemProvider == null) {
			gpsMeasureModeTypeItemProvider = new GpsMeasureModeTypeItemProvider(this);
		}

		return gpsMeasureModeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsSpeedRefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsSpeedRefTypeItemProvider gpsSpeedRefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsSpeedRefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsSpeedRefTypeAdapter() {
		if (gpsSpeedRefTypeItemProvider == null) {
			gpsSpeedRefTypeItemProvider = new GpsSpeedRefTypeItemProvider(this);
		}

		return gpsSpeedRefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.GpsStatusType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpsStatusTypeItemProvider gpsStatusTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.GpsStatusType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpsStatusTypeAdapter() {
		if (gpsStatusTypeItemProvider == null) {
			gpsStatusTypeItemProvider = new GpsStatusTypeItemProvider(this);
		}

		return gpsStatusTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.InteroperabilityIfdType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteroperabilityIfdTypeItemProvider interoperabilityIfdTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.InteroperabilityIfdType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteroperabilityIfdTypeAdapter() {
		if (interoperabilityIfdTypeItemProvider == null) {
			interoperabilityIfdTypeItemProvider = new InteroperabilityIfdTypeItemProvider(this);
		}

		return interoperabilityIfdTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.InteroperabilityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteroperabilityTypeItemProvider interoperabilityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.InteroperabilityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteroperabilityTypeAdapter() {
		if (interoperabilityTypeItemProvider == null) {
			interoperabilityTypeItemProvider = new InteroperabilityTypeItemProvider(this);
		}

		return interoperabilityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.LightSourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightSourceTypeItemProvider lightSourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.LightSourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightSourceTypeAdapter() {
		if (lightSourceTypeItemProvider == null) {
			lightSourceTypeItemProvider = new LightSourceTypeItemProvider(this);
		}

		return lightSourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.MeteringModeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeteringModeTypeItemProvider meteringModeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.MeteringModeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeteringModeTypeAdapter() {
		if (meteringModeTypeItemProvider == null) {
			meteringModeTypeItemProvider = new MeteringModeTypeItemProvider(this);
		}

		return meteringModeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.NonNegativeIntegerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NonNegativeIntegerTypeItemProvider nonNegativeIntegerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.NonNegativeIntegerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNonNegativeIntegerTypeAdapter() {
		if (nonNegativeIntegerTypeItemProvider == null) {
			nonNegativeIntegerTypeItemProvider = new NonNegativeIntegerTypeItemProvider(this);
		}

		return nonNegativeIntegerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.NonNegativeRealType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NonNegativeRealTypeItemProvider nonNegativeRealTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.NonNegativeRealType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNonNegativeRealTypeAdapter() {
		if (nonNegativeRealTypeItemProvider == null) {
			nonNegativeRealTypeItemProvider = new NonNegativeRealTypeItemProvider(this);
		}

		return nonNegativeRealTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.OrientationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrientationTypeItemProvider orientationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.OrientationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrientationTypeAdapter() {
		if (orientationTypeItemProvider == null) {
			orientationTypeItemProvider = new OrientationTypeItemProvider(this);
		}

		return orientationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.PhotometricInterpretationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhotometricInterpretationTypeItemProvider photometricInterpretationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.PhotometricInterpretationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhotometricInterpretationTypeAdapter() {
		if (photometricInterpretationTypeItemProvider == null) {
			photometricInterpretationTypeItemProvider = new PhotometricInterpretationTypeItemProvider(this);
		}

		return photometricInterpretationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.PlanarConfigurationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanarConfigurationTypeItemProvider planarConfigurationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.PlanarConfigurationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanarConfigurationTypeAdapter() {
		if (planarConfigurationTypeItemProvider == null) {
			planarConfigurationTypeItemProvider = new PlanarConfigurationTypeItemProvider(this);
		}

		return planarConfigurationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.PositiveIntegerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositiveIntegerTypeItemProvider positiveIntegerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.PositiveIntegerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositiveIntegerTypeAdapter() {
		if (positiveIntegerTypeItemProvider == null) {
			positiveIntegerTypeItemProvider = new PositiveIntegerTypeItemProvider(this);
		}

		return positiveIntegerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.PrimaryChromaticitiesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimaryChromaticitiesTypeItemProvider primaryChromaticitiesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.PrimaryChromaticitiesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimaryChromaticitiesTypeAdapter() {
		if (primaryChromaticitiesTypeItemProvider == null) {
			primaryChromaticitiesTypeItemProvider = new PrimaryChromaticitiesTypeItemProvider(this);
		}

		return primaryChromaticitiesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.RealType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealTypeItemProvider realTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.RealType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealTypeAdapter() {
		if (realTypeItemProvider == null) {
			realTypeItemProvider = new RealTypeItemProvider(this);
		}

		return realTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.RepeatedFieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatedFieldTypeItemProvider repeatedFieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.RepeatedFieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatedFieldTypeAdapter() {
		if (repeatedFieldTypeItemProvider == null) {
			repeatedFieldTypeItemProvider = new RepeatedFieldTypeItemProvider(this);
		}

		return repeatedFieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.ResolutionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolutionTypeItemProvider resolutionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.ResolutionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolutionTypeAdapter() {
		if (resolutionTypeItemProvider == null) {
			resolutionTypeItemProvider = new ResolutionTypeItemProvider(this);
		}

		return resolutionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SaturationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaturationTypeItemProvider saturationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SaturationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaturationTypeAdapter() {
		if (saturationTypeItemProvider == null) {
			saturationTypeItemProvider = new SaturationTypeItemProvider(this);
		}

		return saturationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SceneCaptureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SceneCaptureTypeItemProvider sceneCaptureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SceneCaptureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSceneCaptureTypeAdapter() {
		if (sceneCaptureTypeItemProvider == null) {
			sceneCaptureTypeItemProvider = new SceneCaptureTypeItemProvider(this);
		}

		return sceneCaptureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SensingMethodType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingMethodTypeItemProvider sensingMethodTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SensingMethodType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingMethodTypeAdapter() {
		if (sensingMethodTypeItemProvider == null) {
			sensingMethodTypeItemProvider = new SensingMethodTypeItemProvider(this);
		}

		return sensingMethodTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SharpnessType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharpnessTypeItemProvider sharpnessTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SharpnessType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharpnessTypeAdapter() {
		if (sharpnessTypeItemProvider == null) {
			sharpnessTypeItemProvider = new SharpnessTypeItemProvider(this);
		}

		return sharpnessTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SingleFieldT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleFieldTItemProvider singleFieldTItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SingleFieldT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleFieldTAdapter() {
		if (singleFieldTItemProvider == null) {
			singleFieldTItemProvider = new SingleFieldTItemProvider(this);
		}

		return singleFieldTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SingleFieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleFieldTypeItemProvider singleFieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SingleFieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleFieldTypeAdapter() {
		if (singleFieldTypeItemProvider == null) {
			singleFieldTypeItemProvider = new SingleFieldTypeItemProvider(this);
		}

		return singleFieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.StringType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringTypeItemProvider stringTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.StringType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringTypeAdapter() {
		if (stringTypeItemProvider == null) {
			stringTypeItemProvider = new StringTypeItemProvider(this);
		}

		return stringTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.StripByteCountsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StripByteCountsTypeItemProvider stripByteCountsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.StripByteCountsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStripByteCountsTypeAdapter() {
		if (stripByteCountsTypeItemProvider == null) {
			stripByteCountsTypeItemProvider = new StripByteCountsTypeItemProvider(this);
		}

		return stripByteCountsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.StripByteCountType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StripByteCountTypeItemProvider stripByteCountTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.StripByteCountType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStripByteCountTypeAdapter() {
		if (stripByteCountTypeItemProvider == null) {
			stripByteCountTypeItemProvider = new StripByteCountTypeItemProvider(this);
		}

		return stripByteCountTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.StripOffsetsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StripOffsetsTypeItemProvider stripOffsetsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.StripOffsetsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStripOffsetsTypeAdapter() {
		if (stripOffsetsTypeItemProvider == null) {
			stripOffsetsTypeItemProvider = new StripOffsetsTypeItemProvider(this);
		}

		return stripOffsetsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.StripOffsetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StripOffsetTypeItemProvider stripOffsetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.StripOffsetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStripOffsetTypeAdapter() {
		if (stripOffsetTypeItemProvider == null) {
			stripOffsetTypeItemProvider = new StripOffsetTypeItemProvider(this);
		}

		return stripOffsetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SubjectAreaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectAreaTypeItemProvider subjectAreaTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SubjectAreaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectAreaTypeAdapter() {
		if (subjectAreaTypeItemProvider == null) {
			subjectAreaTypeItemProvider = new SubjectAreaTypeItemProvider(this);
		}

		return subjectAreaTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SubjectDistanceRangeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectDistanceRangeTypeItemProvider subjectDistanceRangeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SubjectDistanceRangeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectDistanceRangeTypeAdapter() {
		if (subjectDistanceRangeTypeItemProvider == null) {
			subjectDistanceRangeTypeItemProvider = new SubjectDistanceRangeTypeItemProvider(this);
		}

		return subjectDistanceRangeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.SubjectLocationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectLocationTypeItemProvider subjectLocationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.SubjectLocationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectLocationTypeAdapter() {
		if (subjectLocationTypeItemProvider == null) {
			subjectLocationTypeItemProvider = new SubjectLocationTypeItemProvider(this);
		}

		return subjectLocationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.TiffIfdType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TiffIfdTypeItemProvider tiffIfdTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.TiffIfdType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTiffIfdTypeAdapter() {
		if (tiffIfdTypeItemProvider == null) {
			tiffIfdTypeItemProvider = new TiffIfdTypeItemProvider(this);
		}

		return tiffIfdTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.TimeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeTypeItemProvider timeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.TimeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeTypeAdapter() {
		if (timeTypeItemProvider == null) {
			timeTypeItemProvider = new TimeTypeItemProvider(this);
		}

		return timeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.UuidType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UuidTypeItemProvider uuidTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.UuidType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUuidTypeAdapter() {
		if (uuidTypeItemProvider == null) {
			uuidTypeItemProvider = new UuidTypeItemProvider(this);
		}

		return uuidTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.WhiteBalanceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhiteBalanceTypeItemProvider whiteBalanceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.WhiteBalanceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhiteBalanceTypeAdapter() {
		if (whiteBalanceTypeItemProvider == null) {
			whiteBalanceTypeItemProvider = new WhiteBalanceTypeItemProvider(this);
		}

		return whiteBalanceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.WhitePointType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhitePointTypeItemProvider whitePointTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.WhitePointType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhitePointTypeAdapter() {
		if (whitePointTypeItemProvider == null) {
			whitePointTypeItemProvider = new WhitePointTypeItemProvider(this);
		}

		return whitePointTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.YCbCrCoefficientsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YCbCrCoefficientsTypeItemProvider yCbCrCoefficientsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.YCbCrCoefficientsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYCbCrCoefficientsTypeAdapter() {
		if (yCbCrCoefficientsTypeItemProvider == null) {
			yCbCrCoefficientsTypeItemProvider = new YCbCrCoefficientsTypeItemProvider(this);
		}

		return yCbCrCoefficientsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.YCbCrPositioningType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YCbCrPositioningTypeItemProvider yCbCrPositioningTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.YCbCrPositioningType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYCbCrPositioningTypeAdapter() {
		if (yCbCrPositioningTypeItemProvider == null) {
			yCbCrPositioningTypeItemProvider = new YCbCrPositioningTypeItemProvider(this);
		}

		return yCbCrPositioningTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.oracle.xmlns.ord.meta.exif.YCbCrSubSamplingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YCbCrSubSamplingTypeItemProvider yCbCrSubSamplingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.oracle.xmlns.ord.meta.exif.YCbCrSubSamplingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYCbCrSubSamplingTypeAdapter() {
		if (yCbCrSubSamplingTypeItemProvider == null) {
			yCbCrSubSamplingTypeItemProvider = new YCbCrSubSamplingTypeItemProvider(this);
		}

		return yCbCrSubSamplingTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (bitsPerSampleTypeItemProvider != null) bitsPerSampleTypeItemProvider.dispose();
		if (chromaticityItemProvider != null) chromaticityItemProvider.dispose();
		if (colorSpaceTypeItemProvider != null) colorSpaceTypeItemProvider.dispose();
		if (compressionTypeItemProvider != null) compressionTypeItemProvider.dispose();
		if (contrastTypeItemProvider != null) contrastTypeItemProvider.dispose();
		if (customRenderedTypeItemProvider != null) customRenderedTypeItemProvider.dispose();
		if (dateTimeTypeItemProvider != null) dateTimeTypeItemProvider.dispose();
		if (dateTypeItemProvider != null) dateTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (exifIfdTypeItemProvider != null) exifIfdTypeItemProvider.dispose();
		if (exifMetadataTypeItemProvider != null) exifMetadataTypeItemProvider.dispose();
		if (exposureModeTypeItemProvider != null) exposureModeTypeItemProvider.dispose();
		if (exposureProgramTypeItemProvider != null) exposureProgramTypeItemProvider.dispose();
		if (fileSourceTypeItemProvider != null) fileSourceTypeItemProvider.dispose();
		if (flashTypeItemProvider != null) flashTypeItemProvider.dispose();
		if (gainControlTypeItemProvider != null) gainControlTypeItemProvider.dispose();
		if (gpsAltitudeRefTypeItemProvider != null) gpsAltitudeRefTypeItemProvider.dispose();
		if (gpsBearingTypeItemProvider != null) gpsBearingTypeItemProvider.dispose();
		if (gpsDifferentialTypeItemProvider != null) gpsDifferentialTypeItemProvider.dispose();
		if (gpsDirectionTypeItemProvider != null) gpsDirectionTypeItemProvider.dispose();
		if (gpsDistanceRefTypeItemProvider != null) gpsDistanceRefTypeItemProvider.dispose();
		if (gpsIfdTypeItemProvider != null) gpsIfdTypeItemProvider.dispose();
		if (gpsLatitudeRefTypeItemProvider != null) gpsLatitudeRefTypeItemProvider.dispose();
		if (gpsLatitudeTypeItemProvider != null) gpsLatitudeTypeItemProvider.dispose();
		if (gpsLongitudeRefTypeItemProvider != null) gpsLongitudeRefTypeItemProvider.dispose();
		if (gpsLongitudeTypeItemProvider != null) gpsLongitudeTypeItemProvider.dispose();
		if (gpsMeasureModeTypeItemProvider != null) gpsMeasureModeTypeItemProvider.dispose();
		if (gpsSpeedRefTypeItemProvider != null) gpsSpeedRefTypeItemProvider.dispose();
		if (gpsStatusTypeItemProvider != null) gpsStatusTypeItemProvider.dispose();
		if (interoperabilityIfdTypeItemProvider != null) interoperabilityIfdTypeItemProvider.dispose();
		if (interoperabilityTypeItemProvider != null) interoperabilityTypeItemProvider.dispose();
		if (lightSourceTypeItemProvider != null) lightSourceTypeItemProvider.dispose();
		if (meteringModeTypeItemProvider != null) meteringModeTypeItemProvider.dispose();
		if (nonNegativeIntegerTypeItemProvider != null) nonNegativeIntegerTypeItemProvider.dispose();
		if (nonNegativeRealTypeItemProvider != null) nonNegativeRealTypeItemProvider.dispose();
		if (orientationTypeItemProvider != null) orientationTypeItemProvider.dispose();
		if (photometricInterpretationTypeItemProvider != null) photometricInterpretationTypeItemProvider.dispose();
		if (planarConfigurationTypeItemProvider != null) planarConfigurationTypeItemProvider.dispose();
		if (positiveIntegerTypeItemProvider != null) positiveIntegerTypeItemProvider.dispose();
		if (primaryChromaticitiesTypeItemProvider != null) primaryChromaticitiesTypeItemProvider.dispose();
		if (realTypeItemProvider != null) realTypeItemProvider.dispose();
		if (repeatedFieldTypeItemProvider != null) repeatedFieldTypeItemProvider.dispose();
		if (resolutionTypeItemProvider != null) resolutionTypeItemProvider.dispose();
		if (saturationTypeItemProvider != null) saturationTypeItemProvider.dispose();
		if (sceneCaptureTypeItemProvider != null) sceneCaptureTypeItemProvider.dispose();
		if (sensingMethodTypeItemProvider != null) sensingMethodTypeItemProvider.dispose();
		if (sharpnessTypeItemProvider != null) sharpnessTypeItemProvider.dispose();
		if (singleFieldTItemProvider != null) singleFieldTItemProvider.dispose();
		if (singleFieldTypeItemProvider != null) singleFieldTypeItemProvider.dispose();
		if (stringTypeItemProvider != null) stringTypeItemProvider.dispose();
		if (stripByteCountsTypeItemProvider != null) stripByteCountsTypeItemProvider.dispose();
		if (stripByteCountTypeItemProvider != null) stripByteCountTypeItemProvider.dispose();
		if (stripOffsetsTypeItemProvider != null) stripOffsetsTypeItemProvider.dispose();
		if (stripOffsetTypeItemProvider != null) stripOffsetTypeItemProvider.dispose();
		if (subjectAreaTypeItemProvider != null) subjectAreaTypeItemProvider.dispose();
		if (subjectDistanceRangeTypeItemProvider != null) subjectDistanceRangeTypeItemProvider.dispose();
		if (subjectLocationTypeItemProvider != null) subjectLocationTypeItemProvider.dispose();
		if (tiffIfdTypeItemProvider != null) tiffIfdTypeItemProvider.dispose();
		if (timeTypeItemProvider != null) timeTypeItemProvider.dispose();
		if (uuidTypeItemProvider != null) uuidTypeItemProvider.dispose();
		if (whiteBalanceTypeItemProvider != null) whiteBalanceTypeItemProvider.dispose();
		if (whitePointTypeItemProvider != null) whitePointTypeItemProvider.dispose();
		if (yCbCrCoefficientsTypeItemProvider != null) yCbCrCoefficientsTypeItemProvider.dispose();
		if (yCbCrPositioningTypeItemProvider != null) yCbCrPositioningTypeItemProvider.dispose();
		if (yCbCrSubSamplingTypeItemProvider != null) yCbCrSubSamplingTypeItemProvider.dispose();
	}

}
